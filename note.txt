[Solidity] sync
Synchronous: one line after another, the next task has to wait its previous task to finished before it can get executed

[JS] async
Asynchronous: task can happen concurrently

```
    async function main() {
        console.log("hi");
        let variable = 5;
        console.log(variable);
    }
    main();
```

For example, we are setting up a movie night.
1.Cook popcorn
2.Pour Drink
3.Start Movie
We want to finish cook popcorn and pour drink before the movie start.

async function setUpMoviNight() {
    await cookPopcorn()
    await pourDrink()
    startMovie()
}

function cookPopcorn() {
    return Promise()
}

---------------------------------------------------------
Deploy a contrsct ?
We need to wait for it to be deployed
if we don't use async keyword, contract.deploy --> wouldn't wait for it to finish and the rest just won't work
So we want main() to be async


Setup, Installation:
    nodejs, npm
    1. wsl --install
    2. corepack enable // to install yarn
    3. yarn add solc ethers

Compile: you can paste this to the terminal to compile
 `yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol`

    but doing this everytime is not good, put the command into package.json 
    "scripts": {
        "compile": "yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol"
    }
    on terminal run "yarn compile"

Install Ganache:
 Ganache is a fake blockchain where we can locally run tests, deploy and run code.
 Also let us see what is going on a blockchain


Run your own blockchain node instead of using metamask, or any other providers
You can use go-ethereum to run your own node.

 - RPC URL allows us to connect to Test Networks and the way to connect Ganache blockchain
inside of this application. read more https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/etclabscore/ethereum-json-rpc-specification/master/openrpc.json&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:title%5D=Ethereum%20JSON-RPC%20API/

 - Adding TX Overrides: By adding extra args, such as
 const x = await xxx.deploy({ gasPrice: 100000000, gasLimit: 10000000});

 - IMPORTANT Tips: we only get these recepit only when we wait for block confirmation
    TX Receipts: wait for certain block confirmation, such as
        ` const contractReceipt = await contract.deployTransaction.wait(1); `
    And you can see all deployment receipt and TX information!

Deploy with only tx data!
  const nounce = await wallet.getTransactionCount();
  const tx = {
    nonce: nounce,
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x608060405234801561001057600080fd5b506107f1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a35780638bab8dd5146100bf5780639e7a13ad146100ef578063c088654814610120575b600080fd5b61006f61013c565b60405161007c91906105b0565b60405180910390f35b61008d610145565b60405161009a91906105b0565b60405180910390f35b6100bd60048036038101906100b891906104c3565b61014b565b005b6100d960048036038101906100d4919061041e565b610155565b6040516100e691906105b0565b60405180910390f35b610109600480360381019061010491906104c3565b610183565b604051610117929190610580565b60405180910390f35b61013a60048036038101906101359190610467565b61023f565b005b60008054905090565b60005481565b8060008190555050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061019357600080fd5b90600052602060002090600202016000915090508060000180546101b6906106a7565b80601f01602080910402602001604051908101604052809291908181526020018280546101e2906106a7565b801561022f5780601f106102045761010080835404028352916020019161022f565b820191906000526020600020905b81548152906001019060200180831161021257829003601f168201915b5050505050908060010154905082565b600260405180604001604052808481526020018366ffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906102a49291906102e1565b506020820151816001015550508066ffffffffffffff166001836040516102cb9190610569565b9081526020016040518091039020819055505050565b8280546102ed906106a7565b90600052602060002090601f01602090048101928261030f5760008555610356565b82601f1061032857805160ff1916838001178555610356565b82800160010185558215610356579182015b8281111561035557825182559160200191906001019061033a565b5b5090506103639190610367565b5090565b5b80821115610380576000816000905550600101610368565b5090565b6000610397610392846105f0565b6105cb565b9050828152602081018484840111156103b3576103b261076d565b5b6103be848285610665565b509392505050565b600082601f8301126103db576103da610768565b5b81356103eb848260208601610384565b91505092915050565b6000813590506104038161078d565b92915050565b600081359050610418816107a4565b92915050565b60006020828403121561043457610433610777565b5b600082013567ffffffffffffffff81111561045257610451610772565b5b61045e848285016103c6565b91505092915050565b6000806040838503121561047e5761047d610777565b5b600083013567ffffffffffffffff81111561049c5761049b610772565b5b6104a8858286016103c6565b92505060206104b985828601610409565b9150509250929050565b6000602082840312156104d9576104d8610777565b5b60006104e7848285016103f4565b91505092915050565b60006104fb82610621565b610505818561062c565b9350610515818560208601610674565b61051e8161077c565b840191505092915050565b600061053482610621565b61053e818561063d565b935061054e818560208601610674565b80840191505092915050565b61056381610648565b82525050565b60006105758284610529565b915081905092915050565b6000604082019050818103600083015261059a81856104f0565b90506105a9602083018461055a565b9392505050565b60006020820190506105c5600083018461055a565b92915050565b60006105d56105e6565b90506105e182826106d9565b919050565b6000604051905090565b600067ffffffffffffffff82111561060b5761060a610739565b5b6106148261077c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b600066ffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610692578082015181840152602081019050610677565b838111156106a1576000848401525b50505050565b600060028204905060018216806106bf57607f821691505b602082108114156106d3576106d261070a565b5b50919050565b6106e28261077c565b810181811067ffffffffffffffff8211171561070157610700610739565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61079681610648565b81146107a157600080fd5b50565b6107ad81610652565b81146107b857600080fd5b5056fea264697066735822122056e161e8229f60b012b468ad0ca63963c5c5fa770c067c3a3b217e891a78194c64736f6c63430008070033",
    chainId: 1337, //reason: 'chainId address mismatch',
  };
  // TX needed to be signed, this line only signed our tx, but not send
  const signTxResponse = await wallet.signTransaction(tx);
  // send TX
  const sentTxResponse = await wallet.sendTransaction(tx);
  await sentTxResponse.wait(1);
  console.log(signTxResponse);


  Better Private Key Management
    1. save you keys in .env first
    2. create encryptKey.js
        ```
         const wallet = new ethers.Wallet(process.env.PRIVATE_KEY);
         const encryptedJsonKey = await wallet.encrypt(
                process.env.PRIVATE_KEY_PASSWORD,
                process.env.PRIVATE_KEY
            );
            fs.writeFileSync("./.encryptedKey.json", encryptedJsonKey);
        ```
    3. Run 'node encryptKey.json'
    4. Run 'history -c' to clear history after you encrypted the key
    5. Run 'PRIVATE_KEY_PASSWORD=?????? node deploy.js'

  To use key:
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    let wallet = new ethers.Wallet.fromEncryptedJsonSync(
        encryptedJson,
        process.env.PRIVATE_KEY_PASSWORD
    );
    wallet = await wallet.connect(provider);